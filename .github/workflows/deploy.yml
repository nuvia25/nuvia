name: Laravel Production CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Production
    env:
      CERTBOT_EMAIL: ${{ secrets.CERTBOT_EMAIL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Pull latest code and deploy Laravel
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "cd ${{ secrets.APP_PATH }} && \
             git pull https://${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git && \
             make deploy-prod"

      - name: Check SSL requirements and existing certificates
        id: ssl_check
        run: |
          if [ -n "${{ env.CERTBOT_EMAIL }}" ] && [ -n "${{ secrets.CLOUDFLARE_TOKEN }}" ]; then
            echo "ssl_enabled=true" >> $GITHUB_OUTPUT
            echo "[deploy] üîç SSL configurado - verificando certificados existentes..."
          
            # Verificar se certificado j√° existe
            if ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
               "cd ${{ secrets.APP_PATH }} && make ssl-status | grep -q 'Certificate Name: ${{ secrets.DOMAIN_NAME }}'"; then
              echo "cert_exists=true" >> $GITHUB_OUTPUT
              echo "[deploy] ‚úÖ Certificado wildcard j√° existe"
            else
              echo "cert_exists=false" >> $GITHUB_OUTPUT
              echo "[deploy] üìù Nenhum certificado encontrado"
            fi
          else
            echo "ssl_enabled=false" >> $GITHUB_OUTPUT
            echo "[deploy] ‚ö†Ô∏è SSL n√£o configurado (CERTBOT_EMAIL ou CLOUDFLARE_TOKEN ausente)"
          fi

      - name: Initialize SSL wildcard (first time only)
        if: steps.ssl_check.outputs.ssl_enabled == 'true' && steps.ssl_check.outputs.cert_exists == 'false'
        run: |
          echo "[deploy] üöÄ Configurando SSL wildcard pela primeira vez..."
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "cd ${{ secrets.APP_PATH }} && \
             DOMAIN_NAME='${{ secrets.DOMAIN_NAME }}' \
             CERTBOT_EMAIL='${{ secrets.CERTBOT_EMAIL }}' \
             CLOUDFLARE_TOKEN='${{ secrets.CLOUDFLARE_TOKEN }}' \
             make ssl-init"
          echo "[deploy] ‚úÖ SSL wildcard configurado com sucesso!"

      - name: Activate existing SSL (if certificate exists but not active)
        if: steps.ssl_check.outputs.ssl_enabled == 'true' && steps.ssl_check.outputs.cert_exists == 'true'
        run: |
          echo "[deploy] üîí Ativando HTTPS com certificado existente..."
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "cd ${{ secrets.APP_PATH }} && make ssl-on"

      - name: Laravel post-deployment optimizations
        run: |
          echo "[deploy] ‚ö° Executando otimiza√ß√µes finais do Laravel..."
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "cd ${{ secrets.APP_PATH }} && make optimize"

      - name: Verify deployment status
        run: |
          echo "[deploy] üìä Verificando status da aplica√ß√£o..."
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "cd ${{ secrets.APP_PATH }} && make status"

      - name: Health check and connectivity test
        run: |
          sleep 20  # Aguardar containers estabilizarem
          DOMAIN='${{ secrets.DOMAIN_NAME }}'
          
          echo "üåê === Testando conectividade para: $DOMAIN ==="
          
          # Teste b√°sico de health endpoint
          echo "ü©∫ Testando health check..."
          if ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
             "cd ${{ secrets.APP_PATH }} && make health | grep -q 'saud√°vel'"; then
            echo "‚úÖ Health check local: PASSOU"
            LOCAL_HEALTH=true
          else
            echo "‚ö†Ô∏è Health check local: FALHOU"
            LOCAL_HEALTH=false
          fi
          
          # Teste HTTP externo
          echo "üì° Testando HTTP externo: http://$DOMAIN"
          if curl -fsS -m 30 -L "http://$DOMAIN" -o /dev/null 2>&1; then
            echo "‚úÖ HTTP: ACESS√çVEL"
            HTTP_SUCCESS=true
          else
            echo "‚ùå HTTP: FALHOU"
            HTTP_SUCCESS=false
          fi
          
          # Teste HTTPS externo (se SSL habilitado)
          if [ "${{ steps.ssl_check.outputs.ssl_enabled }}" = "true" ]; then
            echo "üîê Testando HTTPS externo: https://$DOMAIN"
            if curl -fsS -m 30 --retry 3 --retry-connrefused --retry-delay 10 -L "https://$DOMAIN" -o /dev/null 2>&1; then
              echo "‚úÖ HTTPS: ACESS√çVEL"
              HTTPS_SUCCESS=true
            else
              echo "‚ö†Ô∏è HTTPS: N√£o acess√≠vel (pode precisar de propaga√ß√£o DNS)"
              HTTPS_SUCCESS=false
            fi
          fi
          
          # Teste de subdom√≠nio wildcard (se SSL ativo)
          if [ "${{ steps.ssl_check.outputs.ssl_enabled }}" = "true" ] && [ "$HTTPS_SUCCESS" = "true" ]; then
            echo "üåü Testando wildcard: https://app.$DOMAIN"
            if curl -fsS -m 20 -L "https://app.$DOMAIN" -o /dev/null 2>&1; then
              echo "‚úÖ Wildcard SSL: FUNCIONANDO"
            else
              echo "‚ö†Ô∏è Wildcard SSL: Pode precisar de propaga√ß√£o DNS"
            fi
          fi
          
          # Resumo final
          echo "=================================="
          if [ "$HTTP_SUCCESS" = "true" ]; then
            echo "üéâ Deploy do Laravel realizado com sucesso!"
            echo "üåç Site principal: http://$DOMAIN"
          
            if [ "${{ steps.ssl_check.outputs.ssl_enabled }}" = "true" ]; then
              if [ "$HTTPS_SUCCESS" = "true" ]; then
                echo "üîí SSL/HTTPS: https://$DOMAIN"
                echo "üåü Wildcard: https://app.$DOMAIN, https://admin.$DOMAIN, etc."
              else
                echo "‚è≥ HTTPS em configura√ß√£o - aguarde propaga√ß√£o DNS"
              fi
            else
              echo "üí° Para habilitar SSL: configure CERTBOT_EMAIL e CLOUDFLARE_TOKEN"
            fi
          
            echo ""
            echo "üìã Recursos dispon√≠veis:"
            echo "   ‚Ä¢ Health check: http://$DOMAIN/health"
            echo "   ‚Ä¢ Laravel app: http://$DOMAIN"
            if [ "${{ steps.ssl_check.outputs.ssl_enabled }}" = "true" ]; then
              echo "   ‚Ä¢ SSL wildcard: https://*.$DOMAIN"
            fi
          else
            echo "‚ùå Problemas na conectividade - verificar logs:"
            echo "   ‚Ä¢ ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
            echo "   ‚Ä¢ cd ${{ secrets.APP_PATH }} && make logs-prod"
            exit 1
          fi

      - name: Notify deployment completion
        if: success()
        run: |
          echo "‚úÖ Deploy conclu√≠do com sucesso!"
          echo "üöÄ Laravel em produ√ß√£o est√° rodando"

      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/id_rsa ~/.ssh/id_ed25519 ~/.ssh/known_hosts