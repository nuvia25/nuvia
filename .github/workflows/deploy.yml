name: Production CI/CD

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Production
    env:
      SERVER_NAME: ${{ secrets.SERVER_NAME }}
      CERTBOT_EMAIL: ${{ secrets.CERTBOT_EMAIL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Deploy to production
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.APP_PATH }} && git pull https://${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git && SERVER_NAME='${{ secrets.SERVER_NAME }}' make deploy-prod"

      - name: Check SSL requirements
        id: ssl_check
        run: |
          if [ -n "${{ env.CERTBOT_EMAIL }}" ] && [ -n "${{ env.SERVER_NAME }}" ]; then
            echo "ssl_enabled=true" >> $GITHUB_OUTPUT
          else
            echo "ssl_enabled=false" >> $GITHUB_OUTPUT
          fi

      - name: Bootstrap HTTPS (first run) only if no valid cert exists
        if: steps.ssl_check.outputs.ssl_enabled == 'true'
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.APP_PATH }} && 
            echo '[deploy] üîç Verificando certificados existentes...' && 
            if docker compose -f docker-compose.prod.yml run --rm --entrypoint certbot certbot certificates 2>/dev/null | grep -q 'Domains: ${{ env.SERVER_NAME }}'; then
              echo '[deploy] ‚úÖ Certificado j√° existe para ${{ env.SERVER_NAME }}'
            else
              echo '[deploy] üöÄ Iniciando bootstrap do certificado SSL para ${{ env.SERVER_NAME }}'
              if make certbot-init MODE=prod domain='${{ env.SERVER_NAME }}' email='${{ env.CERTBOT_EMAIL }}'; then
                echo '[deploy] ‚úÖ Certificado emitido com sucesso'
                make MODE=prod nginx-reload && echo '[deploy] ‚úÖ Nginx recarregado com SSL'
              else
                echo '[deploy] ‚ö†Ô∏è Falha na emiss√£o do certificado - continuando com HTTP'
              fi
            fi"

      - name: Verify deployment
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.APP_PATH }} && docker compose -f docker-compose.prod.yml ps"

      - name: Test site connectivity (HTTP and HTTPS)
        run: |
          sleep 15
          URL='${{ env.SERVER_NAME }}'
          if [ -z "$URL" ]; then URL='${{ secrets.SSH_HOST }}'; fi
          
          echo "üåê Testando conectividade para: $URL"
          echo "=================================="
          
          # Teste HTTP
          echo "üì° Testando HTTP em: http://$URL"
          if curl -fsS -m 20 -L "http://$URL" -o /dev/null; then
            echo "‚úÖ HTTP: OK"
            HTTP_SUCCESS=true
          else
            echo "‚ùå HTTP: FALHOU"
            HTTP_SUCCESS=false
          fi
          
          # Teste HTTPS (mais tolerante)
          echo "üîê Testando HTTPS em: https://$URL"
          if curl -fsS -m 30 --retry 3 --retry-connrefused --retry-delay 5 -L "https://$URL" -o /dev/null; then
            echo "‚úÖ HTTPS: OK"
            HTTPS_SUCCESS=true
          else
            echo "‚ö†Ô∏è HTTPS: N√£o dispon√≠vel (pode precisar de propaga√ß√£o DNS ou primeiro deploy)"
            HTTPS_SUCCESS=false
          fi
          
          # Resumo
          echo "=================================="
          if [ "$HTTP_SUCCESS" = "true" ]; then
            echo "üéâ Deploy realizado com sucesso! Site acess√≠vel via HTTP"
            if [ "$HTTPS_SUCCESS" = "true" ]; then
              echo "üîí SSL/HTTPS tamb√©m funcionando perfeitamente"
            fi
          else
            echo "‚ùå Problemas na conectividade - verificar logs do container"
            exit 1
          fi

      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/id_rsa ~/.ssh/id_ed25519