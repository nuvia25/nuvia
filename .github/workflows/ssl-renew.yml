name: SSL Renew (Laravel Wildcard)

on:
  schedule:
    - cron: '17 3 * * *' # Diariamente às 03:17 UTC
  workflow_dispatch:

jobs:
  renew:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Check SSL configuration
        id: ssl_check
        run: |
          if [ -n "${{ secrets.CERTBOT_EMAIL }}" ] && [ -n "${{ secrets.CLOUDFLARE_TOKEN }}" ]; then
            echo "ssl_configured=true" >> $GITHUB_OUTPUT
            echo "🔒 SSL configurado - prosseguindo com renovação"
          else
            echo "ssl_configured=false" >> $GITHUB_OUTPUT
            echo "⚠️ SSL não configurado - pulando renovação"
          fi

      - name: Test certificate renewal (dry-run)
        if: steps.ssl_check.outputs.ssl_configured == 'true'
        run: |
          echo "🧪 Testando renovação dos certificados (dry-run)..."
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "cd ${{ secrets.APP_PATH }} && \
             CLOUDFLARE_TOKEN='${{ secrets.CLOUDFLARE_TOKEN }}' \
             make ssl-test"
          echo "✅ Teste de renovação bem-sucedido"

      - name: Renew SSL certificates
        if: steps.ssl_check.outputs.ssl_configured == 'true'
        run: |
          echo "🔄 Renovando certificados SSL wildcard..."
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "cd ${{ secrets.APP_PATH }} && \
             CLOUDFLARE_TOKEN='${{ secrets.CLOUDFLARE_TOKEN }}' \
             make ssl-renew"
          echo "✅ Certificados renovados com sucesso"

      - name: Verify SSL status after renewal
        if: steps.ssl_check.outputs.ssl_configured == 'true'
        run: |
          echo "📊 Verificando status dos certificados..."
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "cd ${{ secrets.APP_PATH }} && make ssl-status"

      - name: Test HTTPS connectivity
        if: steps.ssl_check.outputs.ssl_configured == 'true'
        run: |
          sleep 10  # Aguardar nginx reload
          DOMAIN='${{ secrets.DOMAIN_NAME }}'
          
          echo "🌐 Testando conectividade HTTPS pós-renovação..."
          
          # Teste HTTPS principal
          if curl -fsS -m 20 --retry 2 --retry-delay 5 -L "https://$DOMAIN" -o /dev/null 2>&1; then
            echo "✅ HTTPS principal: OK"
          else
            echo "⚠️ HTTPS principal: Problema detectado"
          fi
          
          # Teste wildcard
          if curl -fsS -m 20 --retry 2 --retry-delay 5 -L "https://app.$DOMAIN" -o /dev/null 2>&1; then
            echo "✅ Wildcard SSL: OK"
          else
            echo "⚠️ Wildcard SSL: Problema detectado"
          fi

      - name: Backup certificates
        if: steps.ssl_check.outputs.ssl_configured == 'true'
        run: |
          echo "💾 Criando backup dos certificados..."
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "cd ${{ secrets.APP_PATH }} && make ssl-backup"
          echo "✅ Backup dos certificados criado"

      - name: Log renewal completion
        if: steps.ssl_check.outputs.ssl_configured == 'true'
        run: |
          echo "🎉 Renovação SSL concluída com sucesso!"
          echo "📅 Próxima renovação automática: $(date -d '+30 days')"
          echo "🌍 Certificado wildcard válido para: *.${{ secrets.DOMAIN_NAME }}"

      - name: Skip renewal notification
        if: steps.ssl_check.outputs.ssl_configured == 'false'
        run: |
          echo "ℹ️ Renovação SSL pulada - SSL não configurado"
          echo "💡 Para habilitar: configure CERTBOT_EMAIL e CLOUDFLARE_TOKEN nos secrets"

      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/id_rsa ~/.ssh/id_ed25519 ~/.ssh/known_hosts