services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        user: ${APP_USER:-laravel}
        uid: ${APP_UID:-1000}
    container_name: laravel-app-prod
    restart: unless-stopped
    working_dir: /var/www
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      DB_CONNECTION: ${DB_CONNECTION:-mysql}
      DB_HOST: ${DB_HOST:-database}
      DB_PORT: ${DB_PORT:-3306}
      DB_DATABASE: ${DB_DATABASE:-laravel}
      DB_USERNAME: ${DB_USERNAME:-laravel}
      DB_PASSWORD: ${DB_PASSWORD:-secret}
    volumes:
      - ./:/var/www
    networks:
      - prod-network

  nginx:
    image: nginx:alpine
    container_name: laravel-nginx-prod
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./.docker/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./public:/var/www/public:ro
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command:
      - sh
      - -c
      - |
        echo "[nginx] ðŸš€ Inicializando configuraÃ§Ã£o para ${DOMAIN_NAME:-domain.local}"
        nginx -t || true
        exec nginx -g 'daemon off;'
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1/health || exit 1"]
    networks:
      - prod-network

  database:
    image: mysql:8.0
    container_name: laravel-db-prod
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-laravel}
      MYSQL_USER: ${DB_USERNAME:-laravel}
      MYSQL_PASSWORD: ${DB_PASSWORD:-secret}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root}
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - prod-network

  redis:
    image: redis:7-alpine
    container_name: laravel-redis-prod
    restart: unless-stopped
    networks:
      - prod-network

  certbot:
    build:
      context: ./.docker/certbot
      dockerfile: Dockerfile
    image: custom-certbot-cloudflare
    container_name: certbot
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: ["/bin/sh", "-c"]
    command: ["certbot --version"]
    networks:
      - prod-network

networks:
  prod-network:
    driver: bridge

volumes:
  certbot_conf:
  certbot_www:
  db_data: