# HTTP Server (Always active - for Certbot challenges and redirects)
server {
    listen 80;
    server_name ${SERVER_NAME};

    # Certbot challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "OK";
        add_header Content-Type text/plain;
    }

    # Redirect HTTP to HTTPS if SSL is enabled
    location / {
        if ($arg_ssl != "0") {
            return 301 https://$server_name$request_uri;
        }
        try_files $uri $uri/ /index.php?$query_string;
    }

    # PHP-FPM configuration for HTTP (fallback)
    location ~ \.php$ {
        include        fastcgi_params;
        fastcgi_pass   app:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME /var/www/public$fastcgi_script_name;
        fastcgi_param  PATH_INFO        $fastcgi_path_info;
        fastcgi_param  PATH_TRANSLATED  /var/www/public$fastcgi_path_info;
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
    }

    # Security headers and denials
    location ~ /\.ht { deny all; }
    location ~ /\.git { deny all; }
    location ~ /\.env { deny all; }

    client_max_body_size 50M;
    root /var/www/public;
    index index.php index.html index.htm;
}

#BEGIN_SSL
# HTTPS Server (Only active when SSL certificates exist)
server {
    listen 443 ssl http2;
    server_name ${SERVER_NAME};

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/${SERVER_NAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${SERVER_NAME}/privkey.pem;

    # Modern SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Laravel Application
    root /var/www/public;
    index index.php index.html index.htm;
    client_max_body_size 50M;

    # Health check
    location /health {
        access_log off;
        return 200 "OK - HTTPS";
        add_header Content-Type text/plain;
    }

    # Main location block
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # PHP-FPM configuration
    location ~ \.php$ {
        include        fastcgi_params;
        fastcgi_pass   app:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param  PATH_INFO        $fastcgi_path_info;
        fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
    }

    # Security - Deny access to sensitive files
    location ~ /\.ht { deny all; }
    location ~ /\.git { deny all; }
    location ~ /\.env { deny all; }
}
#END_SSL